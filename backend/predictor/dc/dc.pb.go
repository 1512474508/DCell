// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dc.proto

/*
Package dc is a generated protocol buffer package.

It is generated from these files:
	dc.proto

It has these top-level messages:
	Request
	Reply
	Node
	Coordinate
	Edge
*/
package dc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Genes    []string `protobuf:"bytes,2,rep,name=genes" json:"genes,omitempty"`
	Ontology string   `protobuf:"bytes,1,opt,name=ontology" json:"ontology,omitempty"`
	Growth   bool     `protobuf:"varint,3,opt,name=growth" json:"growth,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *Request) GetOntology() string {
	if m != nil {
		return m.Ontology
	}
	return ""
}

func (m *Request) GetGrowth() bool {
	if m != nil {
		return m.Growth
	}
	return false
}

type Reply struct {
	Nodes []*Node `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
	Edges []*Edge `protobuf:"bytes,4,rep,name=edges" json:"edges,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reply) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Reply) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type Node struct {
	Id         string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Gi         float64     `protobuf:"fixed64,2,opt,name=gi" json:"gi,omitempty"`
	State      float64     `protobuf:"fixed64,3,opt,name=state" json:"state,omitempty"`
	Neurons    []float64   `protobuf:"fixed64,4,rep,packed,name=neurons" json:"neurons,omitempty"`
	Coordinate *Coordinate `protobuf:"bytes,5,opt,name=coordinate" json:"coordinate,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetGi() float64 {
	if m != nil {
		return m.Gi
	}
	return 0
}

func (m *Node) GetState() float64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Node) GetNeurons() []float64 {
	if m != nil {
		return m.Neurons
	}
	return nil
}

func (m *Node) GetCoordinate() *Coordinate {
	if m != nil {
		return m.Coordinate
	}
	return nil
}

type Coordinate struct {
	X float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
}

func (m *Coordinate) Reset()                    { *m = Coordinate{} }
func (m *Coordinate) String() string            { return proto.CompactTextString(m) }
func (*Coordinate) ProtoMessage()               {}
func (*Coordinate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Coordinate) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Coordinate) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Edge struct {
	Source     string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Target     string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Importance int32  `protobuf:"varint,3,opt,name=importance" json:"importance,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Edge) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Edge) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Edge) GetImportance() int32 {
	if m != nil {
		return m.Importance
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Reply)(nil), "Reply")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*Coordinate)(nil), "Coordinate")
	proto.RegisterType((*Edge)(nil), "Edge")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeepCell service

type DeepCellClient interface {
	Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type deepCellClient struct {
	cc *grpc.ClientConn
}

func NewDeepCellClient(cc *grpc.ClientConn) DeepCellClient {
	return &deepCellClient{cc}
}

func (c *deepCellClient) Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/DeepCell/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeepCell service

type DeepCellServer interface {
	Run(context.Context, *Request) (*Reply, error)
}

func RegisterDeepCellServer(s *grpc.Server, srv DeepCellServer) {
	s.RegisterService(&_DeepCell_serviceDesc, srv)
}

func _DeepCell_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepCellServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeepCell/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepCellServer).Run(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeepCell_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DeepCell",
	HandlerType: (*DeepCellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _DeepCell_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dc.proto",
}

func init() { proto.RegisterFile("dc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0xc7, 0xdf, 0x26, 0x4d, 0x9b, 0x4e, 0x1f, 0xef, 0xb0, 0x3c, 0x64, 0xad, 0x20, 0x21, 0x20,
	0x2c, 0x08, 0x39, 0xd4, 0x4f, 0x20, 0xd5, 0xab, 0x87, 0x11, 0xbc, 0xd7, 0xec, 0xb0, 0x06, 0xe2,
	0x6e, 0xdc, 0x6c, 0xb0, 0x39, 0xfb, 0xc5, 0x65, 0x93, 0xb5, 0xf6, 0xf8, 0xfb, 0xff, 0x33, 0xc9,
	0x2f, 0x33, 0x90, 0xab, 0xba, 0xea, 0x9c, 0xf5, 0xb6, 0x7c, 0x86, 0x15, 0xd2, 0xc7, 0x40, 0xbd,
	0xe7, 0xff, 0x21, 0xd3, 0x64, 0xa8, 0x17, 0x49, 0x91, 0xca, 0x35, 0xce, 0xc0, 0xb7, 0x90, 0x5b,
	0xe3, 0x6d, 0x6b, 0xf5, 0x28, 0x58, 0xc1, 0xe4, 0x1a, 0x4f, 0xcc, 0x2f, 0x60, 0xa9, 0x9d, 0xfd,
	0xf4, 0x6f, 0x22, 0x2d, 0x98, 0xcc, 0x31, 0x52, 0x79, 0x0f, 0x19, 0x52, 0xd7, 0x8e, 0xfc, 0x0a,
	0x32, 0x63, 0x15, 0xf5, 0x22, 0x2d, 0x52, 0xb9, 0xd9, 0x65, 0xd5, 0x93, 0x55, 0x84, 0x73, 0x16,
	0x4a, 0x52, 0x9a, 0x7a, 0xb1, 0x88, 0xe5, 0xa3, 0xd2, 0x84, 0x73, 0x56, 0x7e, 0x31, 0x58, 0x84,
	0x87, 0xf9, 0x3f, 0x48, 0x1a, 0x15, 0xbf, 0x9c, 0x34, 0x2a, 0xb0, 0x6e, 0x44, 0x52, 0x30, 0xc9,
	0x30, 0xd1, 0x4d, 0xb0, 0xee, 0xfd, 0xc1, 0xd3, 0xa4, 0xc0, 0x70, 0x06, 0x2e, 0x60, 0x65, 0x68,
	0x70, 0xd6, 0xcc, 0x6f, 0x67, 0xf8, 0x83, 0xfc, 0x16, 0xa0, 0xb6, 0xd6, 0xa9, 0xc6, 0x84, 0xa1,
	0xac, 0x60, 0x72, 0xb3, 0xdb, 0x54, 0xfb, 0x53, 0x84, 0x67, 0x75, 0x29, 0x01, 0x7e, 0x1b, 0xfe,
	0x17, 0xd8, 0x71, 0x32, 0x61, 0xc8, 0x8e, 0x81, 0xc6, 0xe8, 0xc1, 0xc6, 0xf2, 0x05, 0x16, 0x41,
	0x3f, 0xac, 0xa4, 0xb7, 0x83, 0xab, 0x29, 0x2a, 0x47, 0x0a, 0xb9, 0x3f, 0x38, 0x4d, 0x7e, 0x1a,
	0x59, 0x63, 0x24, 0x7e, 0x0d, 0xd0, 0xbc, 0x77, 0xd6, 0xf9, 0x83, 0xa9, 0xe7, 0x7f, 0xc8, 0xf0,
	0x2c, 0xd9, 0xdd, 0x40, 0xfe, 0x40, 0xd4, 0xed, 0xa9, 0x6d, 0xf9, 0x25, 0xa4, 0x38, 0x18, 0x9e,
	0x57, 0xf1, 0x62, 0xdb, 0x65, 0x35, 0xad, 0xb9, 0xfc, 0xf3, 0xba, 0x9c, 0xae, 0x79, 0xf7, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x69, 0x29, 0x4f, 0x3e, 0xd9, 0x01, 0x00, 0x00,
}
